// Code generated by protoc-gen-go.
// source: ai.proto
// DO NOT EDIT!

/*
Package services is a generated protocol buffer package.

It is generated from these files:
	ai.proto
	chunk.proto

It has these top-level messages:
	Entity
	Success
	ChunkLoc
	IntRow
	FloatRow
	Unit
	Chunk
*/
package services

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Entity struct {
	Uuid    string `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
	MapName string `protobuf:"bytes,2,opt,name=mapName" json:"mapName,omitempty"`
	Tick    int64  `protobuf:"varint,3,opt,name=tick" json:"tick,omitempty"`
}

func (m *Entity) Reset()                    { *m = Entity{} }
func (m *Entity) String() string            { return proto.CompactTextString(m) }
func (*Entity) ProtoMessage()               {}
func (*Entity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Entity) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Entity) GetMapName() string {
	if m != nil {
		return m.MapName
	}
	return ""
}

func (m *Entity) GetTick() int64 {
	if m != nil {
		return m.Tick
	}
	return 0
}

type Success struct {
	Success bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Error   string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *Success) Reset()                    { *m = Success{} }
func (m *Success) String() string            { return proto.CompactTextString(m) }
func (*Success) ProtoMessage()               {}
func (*Success) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Success) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *Success) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*Entity)(nil), "services.Entity")
	proto.RegisterType((*Success)(nil), "services.Success")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AI service

type AIClient interface {
	ProcessUnit(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Success, error)
}

type aIClient struct {
	cc *grpc.ClientConn
}

func NewAIClient(cc *grpc.ClientConn) AIClient {
	return &aIClient{cc}
}

func (c *aIClient) ProcessUnit(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Success, error) {
	out := new(Success)
	err := grpc.Invoke(ctx, "/services.AI/processUnit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AI service

type AIServer interface {
	ProcessUnit(context.Context, *Entity) (*Success, error)
}

func RegisterAIServer(s *grpc.Server, srv AIServer) {
	s.RegisterService(&_AI_serviceDesc, srv)
}

func _AI_ProcessUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServer).ProcessUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.AI/ProcessUnit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServer).ProcessUnit(ctx, req.(*Entity))
	}
	return interceptor(ctx, in, info, handler)
}

var _AI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "services.AI",
	HandlerType: (*AIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "processUnit",
			Handler:    _AI_ProcessUnit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ai.proto",
}

func init() { proto.RegisterFile("ai.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 177 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x48, 0xcc, 0xd4, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x28, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x2d, 0x56, 0xf2,
	0xe2, 0x62, 0x73, 0xcd, 0x2b, 0xc9, 0x2c, 0xa9, 0x14, 0x12, 0xe2, 0x62, 0x29, 0x2d, 0xcd, 0x4c,
	0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x85, 0x24, 0xb8, 0xd8, 0x73, 0x13, 0x0b,
	0xfc, 0x12, 0x73, 0x53, 0x25, 0x98, 0xc0, 0xc2, 0x30, 0x2e, 0x48, 0x75, 0x49, 0x66, 0x72, 0xb6,
	0x04, 0xb3, 0x02, 0xa3, 0x06, 0x73, 0x10, 0x98, 0xad, 0x64, 0xc9, 0xc5, 0x1e, 0x5c, 0x9a, 0x9c,
	0x9c, 0x5a, 0x5c, 0x0c, 0xd2, 0x58, 0x0c, 0x61, 0x82, 0xcd, 0xe3, 0x08, 0x82, 0x71, 0x85, 0x44,
	0xb8, 0x58, 0x53, 0x8b, 0x8a, 0xf2, 0x8b, 0xa0, 0x06, 0x42, 0x38, 0x46, 0x56, 0x5c, 0x4c, 0x8e,
	0x9e, 0x42, 0x26, 0x5c, 0xdc, 0x05, 0x45, 0xf9, 0x20, 0x65, 0xa1, 0x79, 0x99, 0x25, 0x42, 0x02,
	0x7a, 0x30, 0x67, 0xea, 0x41, 0xdc, 0x28, 0x25, 0x88, 0x10, 0x81, 0xda, 0xa4, 0xc4, 0x90, 0xc4,
	0x06, 0xf6, 0x93, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x35, 0xed, 0x8c, 0x9b, 0xdf, 0x00, 0x00,
	0x00,
}
